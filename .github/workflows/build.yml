name: Build, Push e Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: ms-gf-product-service-v1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B clean package -DskipTests
      - name: Run tests
        run: mvn test

  docker:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.meta.outputs.tags }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  notify-build:
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify on success
        if: ${{ needs.docker.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: good
          SLACK_TITLE: "‚úÖ Build e Deploy com sucesso!"
          SLACK_MESSAGE: "A imagem ${{ needs.docker.outputs.image_tags }} foi publicada com sucesso no Docker Hub (ms-gf-product-service-v1)."
        continue-on-error: true
      - name: Notify on failure
        if: ${{ needs.docker.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: danger
          SLACK_TITLE: "‚ùå Falha no Build/Deploy"
          SLACK_MESSAGE: "Ocorreu uma falha no pipeline de CI/CD para o ms-gf-product-service-v1."
        continue-on-error: true

  deploy-coolify:
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
    steps:
      - name: Trigger Coolify Deployment
        id: deploy
        run: |
          echo "Iniciando deploy para Coolify..."
          RESPONSE=$(curl -v -s -X POST "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/deploy?uuid=c04ssg4kw8soo8s0g4g8ksc4&force=false" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
          -d '{"ref": "${{ github.ref }}"}')
          echo "Resposta completa do Coolify:"
          echo "$RESPONSE"
          echo "Estrutura JSON da resposta:"
          echo "$RESPONSE" | jq '.'
          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id // .deploymentId // .data.id // .data.deploymentId // ""')
          echo "Deployment ID extra√≠do: '$DEPLOYMENT_ID'"
          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
            echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            echo "Deploy ID encontrado: $DEPLOYMENT_ID"
          else
            echo "Aviso: N√£o foi poss√≠vel extrair o ID do deployment da resposta"
          fi
      - name: Wait and check deployment status
        run: |
          echo "Aguardando 30 segundos para o in√≠cio do deployment..."
          sleep 30
          DEPLOYMENT_ID="${{ steps.deploy.outputs.deployment_id }}"
          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "ID do deployment n√£o encontrado na resposta. Tentando verificar o status geral."
            echo "Tentativa 1: Verificando status do recurso via API de resources..."
            RESOURCE_RESPONSE=$(curl -v -s -X GET "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/resources/c04ssg4kw8soo8s0g4g8ksc4/status" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")
            echo "Resposta da API de recursos:"
            echo "$RESOURCE_RESPONSE" | jq '.'
            HEALTH_STATUS=$(echo "$RESOURCE_RESPONSE" | jq -r '.status // .state // .health // "unknown"')
            echo "Status do recurso: $HEALTH_STATUS"
            echo "Tentativa 2: Verificando status via API de services..."
            SERVICE_RESPONSE=$(curl -v -s -X GET "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/services/c04ssg4kw8soo8s0g4g8ksc4/status" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")
            echo "Resposta da API de servi√ßos:"
            echo "$SERVICE_RESPONSE" | jq '.'
            SERVICE_STATUS=$(echo "$SERVICE_RESPONSE" | jq -r '.status // .state // "unknown"')
            echo "Status do servi√ßo: $SERVICE_STATUS"
            if [[ ("$HEALTH_STATUS" = "running" || "$HEALTH_STATUS" = "success" || "$HEALTH_STATUS" = "healthy") || \
                  ("$SERVICE_STATUS" = "running" || "$SERVICE_STATUS" = "success" || "$SERVICE_STATUS" = "healthy") ]]; then
              echo "Servi√ßo parece estar funcionando corretamente."
            else
              echo "Poss√≠vel problema com o servi√ßo. Status do recurso: $HEALTH_STATUS, Status do servi√ßo: $SERVICE_STATUS"
            fi
          else
            echo "Verificando status do deployment $DEPLOYMENT_ID"
            DEPLOY_RESPONSE=$(curl -v -s -X GET "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/deployments/$DEPLOYMENT_ID/status" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")
            echo "Resposta da API de deployment:"
            echo "$DEPLOY_RESPONSE" | jq '.'
            STATUS=$(echo "$DEPLOY_RESPONSE" | jq -r '.status // .state // "unknown"')
            echo "Status do deployment: $STATUS"
            if [[ "$STATUS" = "success" || "$STATUS" = "running" || "$STATUS" = "completed" || "$STATUS" = "healthy" ]]; then
              echo "Deployment parece estar sendo processado ou conclu√≠do com sucesso."
            else
              echo "Aviso: Status do deployment n√£o reconhecido: $STATUS"
            fi
          fi
          echo "Realizando verifica√ß√£o final do servi√ßo..."
          echo "O servi√ßo est√° sendo implantado ou j√° est√° em execu√ß√£o no Coolify."

  notify-deploy:
    needs: deploy-coolify
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify Coolify Deployment
        if: ${{ needs.deploy-coolify.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: good
          SLACK_TITLE: "üöÄ Deploy no Coolify Conclu√≠do"
          SLACK_MESSAGE: |
            Deploy do servi√ßo ms-gf-product-service-v1 no Coolify foi processado.
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Autor: ${{ github.actor }}
            Deploy ID: ${{ needs.deploy-coolify.outputs.deployment_id || 'ID n√£o dispon√≠vel' }}
        continue-on-error: true
      - name: Notify Coolify Failure
        if: ${{ needs.deploy-coolify.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: danger
          SLACK_TITLE: "‚ùå Falha no Deploy Coolify"
          SLACK_MESSAGE: "Ocorreu uma falha no deploy do ms-gf-product-service-v1 no Coolify."
        continue-on-error: true
